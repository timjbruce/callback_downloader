AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  downloader

  SAM template for Data Downloader with Callback Handler 

Globals:
  Function:
    Timeout: 20

Resources:

  #Downloader Function handles receipt of file list from provider
  DownloaderFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: downloader/
      Handler: app.lambda_handler
      Runtime: python3.6
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref CallbackRegistrationTable
        - DynamoDBWritePolicy:
            TableName: !Ref CallbackFileTable
      Environment:
        Variables:
          FileTable: !Ref CallbackFileTable
          CallbackUrl: !Sub 
            - "https://${MockApiUrl}.execute-api.${AWS::Region}.amazonaws.com/dev/projects"
            - { MockApiUrl: !Ref MockAPI }
            
  #Datadownloader retrieves each file in file list from provider
  #if files are large, this can be made into a container and use batch
  #if files are small or Lambda Storage is increased, this can be done via this function
  DatadownloaderFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: data_downloader/
      Handler: lambda_function.lambda_handler
      Runtime: python3.6
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref CallbackFileTable
        - S3WritePolicy:
            BucketName: awstb-useast2-datacopy
      Environment:
        Variables:
          FileTable: !Ref CallbackFileTable
          Region: !Ref AWS::Region
          Bucket: !Ref FileBucket

  #CallbackWaiter is the start of the Step Function and waits for callback from provider
  CallbackWaiterFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: callbackwaiter/
      Handler: app.lambda_handler
      Runtime: python3.6
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref CallbackRegistrationTable
      Environment:
        Variables:
          TableName: !Ref CallbackRegistrationTable
            
  #HandleCallback is the trigger point to continue the Step Function from the provider callback
  HandleCallback:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: handlecallback/
      Handler: app.lambda_handler
      Runtime: python3.6
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref CallbackRegistrationTable
        - Version: 2012-10-17
          Statement: 
            - Effect: Allow
              Action: 
                - 'states:*'
              Resource: '*'
      Environment:
        Variables:
          TableName: !Ref CallbackRegistrationTable
      Events:
        ApiEvents:
          Type: Api
          Properties:
            Path: /callbacka/{proxy}
            Method: post

  #Step Function for handling coordination
  #needs role for lambda.invoke + batch
  
  #DynamoDB table: CallbackRegistration
  CallbackRegistrationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: 'URI'
          AttributeType: 'S'
      KeySchema:
        -
          AttributeName: 'URI'
          KeyType: 'HASH'
      BillingMode: PAY_PER_REQUEST

  #DyanmoDB table: CallbackFiles
  CallbackFileTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: 'URI'
          AttributeType: 'S'
        -
          AttributeName: 'FilenameURL'
          AttributeType: 'S'
      KeySchema:
        -
          AttributeName: 'URI'
          KeyType: 'HASH'
        -
          AttributeName: 'FilenameURL'
          KeyType: 'RANGE'
      BillingMode: PAY_PER_REQUEST
  
  #S3:Bucket for data copy
  FileBucket:
    Type: AWS::S3::Bucket


  #IAM roles and policies for Batch Service and Instances
  IAMBatchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns: 
        - 'arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole'
      Description: Role for managing Batch Service
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          - Effect: Allow
            Principal:
              Service:
              - batch.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      
  IAMInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns: 
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role'
      Description: Role for instances in the Batch ECS Cluster
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
  
#Role for Job Definition.  This is over-privileged
  IAMJobRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          - Effect: Allow
            Principal:
              Service:
              - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'

  IAMInstanceProfile:
    Type:  AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref IAMInstanceRole
  
  StepFunctionsIAMRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSXrayFullAccess'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          - Effect: Allow
            Principal:
              Service:
              - states.amazonaws.com
            Action:
              - 'sts:AssumeRole'
  
  StepFunctionsRunJobPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DownloaderStepFunctionsRunJobPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'batch:SubmitJob'
              - 'batch:DescribeJobs'
              - 'batch:TerminateJob'
            Resource: '*'
      Roles:
        - !Ref StepFunctionsIAMRole
  
  StepFunctionsEventPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DownloaderStepFunctionsEventPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'events:PutTargets'
              - 'events:PutRule'
              - 'events:DescribeRule'
            Resource: '*'
      Roles:
        - !Ref StepFunctionsIAMRole
  
  StepFunctionsLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DownloaderStepFunctionsLambdaPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'lambda:InvokeFunction'
            Resource: 
              - !GetAtt DownloaderFunction.Arn
              - !GetAtt CallbackWaiterFunction.Arn
      Roles:
        - !Ref StepFunctionsIAMRole
  

  #API GW for Mock response
  MockAPI:
    Type:  AWS::Serverless::Api
    Properties:
      DefinitionUri: api/mockswagger.json
      EndpointConfiguration: REGIONAL
      Name: MockAPI
      OpenApiVersion: "2.0"
      StageName: dev

Outputs:
  MockURL:
    Description: "URL for Mock"
    Value: !Sub 
      - "https://${MockApiUrl}.execute-api.${AWS::Region}.amazonaws.com/dev/projects"
      - { MockApiUrl: !Ref MockAPI }
  CallbackURL:
    Description: "URL for Callback"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/callbacka"
  DownloaderJobIAMRole:
    Description: "Role for Downloader Job"
    Value: !Ref IAMJobRole
  InstanceIAMRole:
    Description: "Instance Role for Downloader Job"
    Value: !Ref IAMInstanceRole
  InstanceIAMProfile:
    Description: "Instance Profile for Downloader Job"
    Value: !Ref IAMInstanceProfile
  BatchIAMRole:
    Description: "Role for Batch Service"
    Value: !Ref IAMBatchServiceRole
  StepFunctionsIAMRole:
    Description: "Role for Step Function"
    Value: !Ref StepFunctionsIAMRole
  WaiterFunction:
    Description: "Lambda function to wait for callback"
    Value: !Ref CallbackWaiterFunction
  FileListDownloader:
    Description: "Lambda function to download file list"
    Value: !Ref DownloaderFunction
  S3Bucket:
    Description: "S3 Bucket for Copy of Files"
    Value: !Ref FileBucket
  DynamoDBFilesTable:
    Description: "DynamoDB Table for File Downloading"
    Value: !Ref CallbackFileTable
  
  